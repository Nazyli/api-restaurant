package mocks

import (
	"context"

	"github.com/nazyli/api-restaurant/entity"
	"github.com/stretchr/testify/mock"
)

// UserMock is an autogenerated mock type for the UserMock type
type UserMock struct {
	mock.Mock
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *UserMock) GetByID(ctx context.Context, app int64, id int64, all bool, isAdmin bool, uid string) (user *entity.User, err error) {
	ret := _m.Called(ctx, id)

	var r0 entity.User
	if rf, ok := ret.Get(0).(func(context.Context, int64) entity.User); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return &r0, r1
}
func (_m *UserMock) GetByEmail(ctx context.Context, app int64, email string) (user *entity.User, err error) {
	ret := _m.Called(ctx, email)

	var r0 entity.User
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.User); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return &r0, r1
}
func (_m *UserMock) GetByHash(ctx context.Context, app int64, all bool, isAdmin bool, uid string) (user *entity.User, err error) {
	return

}
func (_m *UserMock) Select(ctx context.Context, app int64, all bool, isAdmin bool, uid string) (users entity.Users, err error) {
	ret := _m.Called(ctx)

	var r0 entity.Users
	if rf, ok := ret.Get(0).(func(context.Context) entity.Users); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(entity.Users)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)

	}
	return r0, r1
}
func (_m *UserMock) Insert(ctx context.Context, user *entity.User) (err error) {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}
func (_m *UserMock) Update(ctx context.Context, isAdmin bool, user *entity.User) (err error) {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0

}
func (_m *UserMock) Delete(ctx context.Context, isAdmin bool, user *entity.User) (err error) {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
